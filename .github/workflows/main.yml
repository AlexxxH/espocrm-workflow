name: Continuous Integration and Delivery

on:
  push:
    branches:
      - 7.5.4-dev

env:
  ESPOCRM_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/espocrm
  ESPOCRM_DAEMON_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/espocrm_daemon

jobs:

  test-unit:
    name: Run Unit Tests on PHP ${{ matrix.php-versions }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-versions: ['8.0', '8.1', '8.2']
    steps:
    - uses: actions/checkout@v3
    - name: Setup PHP with Composer
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
        tools: composer:v2
        ini-values: memory_limit=1024M
    - name: Composer install
      run: composer install
    - name: Static analysis
      run: vendor/bin/phpstan
    - name: Unit testing
      run: vendor/bin/phpunit tests/unit

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: 
      - test-unit
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup PHP with Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          tools: composer:v2
          ini-values: memory_limit=1024M
      - name: Composer install
        run: composer install
      - name: NPM install
        run: npm ci
      - name: Build
        run: grunt
      - name: Add environment variables to .env
        env:
          ESPOCRM_DATABASE_PASSWORD: ${{ secrets.ESPOCRM_DATABASE_PASSWORD }}
          ESPOCRM_ADMIN_USERNAME: ${{ secrets.ESPOCRM_ADMIN_USERNAME }}
          ESPOCRM_ADMIN_PASSWORD: ${{ secrets.ESPOCRM_ADMIN_PASSWORD }}
          ESPOCRM_SITE_URL: ${{ secrets.ESPOCRM_SITE_URL }}
        run: |
          echo ESPOCRM_DATABASE_PASSWORD="'$ESPOCRM_DATABASE_PASSWORD'" >> .env
          echo ESPOCRM_ADMIN_USERNAME="'$ESPOCRM_ADMIN_USERNAME'" >> .env
          echo ESPOCRM_ADMIN_PASSWORD="'$ESPOCRM_ADMIN_PASSWORD'" >> .env
          echo ESPOCRM_SITE_URL="'$ESPOCRM_SITE_URL'" >> .env
      - name: Set environment variables
        run: |
          echo "ESPOCRM_IMAGE=${{ env.ESPOCRM_IMAGE }}" >> $GITHUB_ENV
          echo "ESPOCRM_DAEMON_IMAGE=${{ env.ESPOCRM_DAEMON_IMAGE }}" >> $GITHUB_ENV
      - name: Log in to GitHub Packages
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build images
        run: |
          docker compose -f docker-compose.ci.yml build --no-cache
      - name: Push images
        run: |
          docker push ${{ env.ESPOCRM_IMAGE }}
          docker push ${{ env.ESPOCRM_DAEMON_IMAGE }}

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Add environment variables to .env
        run: |
          echo ESPOCRM_DATABASE_PASSWORD=${{ secrets.ESPOCRM_DATABASE_PASSWORD }} >> .env
          echo ESPOCRM_ADMIN_USERNAME=${{ secrets.ESPOCRM_ADMIN_USERNAME }} >> .env
          echo ESPOCRM_ADMIN_PASSWORD=${{ secrets.ESPOCRM_ADMIN_PASSWORD }} >> .env
          echo ESPOCRM_SITE_URL=${{ secrets.ESPOCRM_SITE_URL }} >> .env
          echo ESPOCRM_IMAGE=${{ env.ESPOCRM_IMAGE }} >> .env
          echo ESPOCRM_DAEMON_IMAGE=${{ env.ESPOCRM_DAEMON_IMAGE }} >> .env
          echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
          echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env
          echo SSH_USER=${{ secrets.SSH_USER }} >> .env
      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "$PRIVATE_KEY"
      - name: Build and deploy images on DigitalOcean
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp -o StrictHostKeyChecking=no -r ./.env ./docker-compose.prod.yml ./docker-daemon.sh ./docker-entrypoint.sh ${{ secrets.SSH_USER }}@${{ secrets.IP_ADDRESS }}:/home/${{ secrets.SSH_USER }}/espocrm
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.IP_ADDRESS }} << 'ENDSSH'
            cd /home/${{ secrets.SSH_USER }}/espocrm
            source .env
            docker login ghcr.io -u $NAMESPACE -p $PERSONAL_ACCESS_TOKEN
            docker pull $ESPOCRM_IMAGE
            docker pull $ESPOCRM_DAEMON_IMAGE
            docker compose -f docker-compose.prod.yml up -d
          ENDSSH